{"version":3,"sources":["components/ForecastList.js","api/Api.js","components/Card.js","components/Autocomplete.js","containers/App.js","serviceWorker.js","index.js"],"names":["ForecastList","props","state","key","id","forecasts","city","this","fetch","forecastUrl","then","response","json","setState","DailyForecasts","degree","parseInt","toFixed","className","map","forecast","date","Date","min","celciusConverter","Temperature","Minimum","Value","max","Maximum","getDate","getMonth","getFullYear","Component","Card","name","country","Autocomplete","onChange","e","cities","userInput","currentTarget","value","filteredCities","filter","EnglishName","toLowerCase","indexOf","showSuggestions","showResult","onClick","innerText","finalResult","resultCity","type","length","Key","Country","defaultProperty","App","onSearchChange","event","searchfield","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dc73eb53.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {getForecast} from '../api/Api';\r\n\r\nexport class ForecastList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        \tkey: this.props.id,\r\n        \tforecasts: []\r\n        };     \r\n    }\r\n    \tcomponentDidMount(){\r\n\t\tgetForecast(this.state.key)\r\n\t\t.then(forecasts => this.setState({forecasts: forecasts.DailyForecasts }));\r\n\t}\r\n        // function converts fahrenheits to celsius\r\n\t\tcelciusConverter(degree) {\r\n\t    const c = (parseInt(degree) - 32) * 5 / 9;\r\n\t    return c.toFixed();\r\n\t  }\r\n\r\n    render(){\r\n    \treturn(\r\n    \t\t<div className = \"forecasts\">\r\n    \t\t\t{ this.state.forecasts.map(forecast => {\r\n    \t\t\t\tconst date = new Date(forecast.Date);\r\n    \t\t\t\tconst min = this.celciusConverter(forecast.Temperature.Minimum.Value);\r\n        \t\t\tconst max = this.celciusConverter(forecast.Temperature.Maximum.Value);\r\n\t\t\t\treturn (\r\n\t\t    \t\t<div className= \"forecastItem\">\r\n\t\t    \t\t<h1>{`${date.getDate()}.${date.getMonth() + 1}.${date.getFullYear()} `}</h1>\r\n\t\t    \t\t<h1>max {max} °</h1>\r\n\t\t    \t\t<h1>min {min} °</h1>\r\n\t\t    \t\t</div>\r\n\t\t    \t\t)})\r\n\t\t\t\t}\r\n\t\t    </div>\r\n    \t\t)\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default ForecastList;","// my accu weather keys\r\n//4vNt3bghWTbeosQRABjaauRL6AjmhwW8\r\n//GPXGqy7AcGYAakx5u02XAgDA5sJtzKvb\r\n\r\n// http://dataservice.accuweather.com/locations/v1/topcities/50\r\n// http://dataservice.accuweather.com/forecasts/v1/daily/5day/{locationKey}\r\n\r\n//function returns locations from Accuweather.com\r\nexport default function getCities() {\r\n  return fetch('http://dataservice.accuweather.com/locations/v1/topcities/150?apikey=GPXGqy7AcGYAakx5u02XAgDA5sJtzKvb')\r\n\t\t.then(response=> response.json());\r\n}\r\n\r\nconst forecastUrl = city => `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${city}?apikey=GPXGqy7AcGYAakx5u02XAgDA5sJtzKvb`;\r\n\r\n// function returns forecasts from Accuweather.com\r\nexport function getForecast(city) {\r\n  return fetch(forecastUrl(city))\r\n    .then(response => response.json());\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport ForecastList from './ForecastList';\r\n\r\n\r\nexport class Card extends Component {\r\n\r\n\t constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        \tname: this.props.name,\r\n        \tcountry: this.props.country,\r\n        \tkey: this.props.id\r\n        }\r\n    }\r\n\r\n\t render() { \r\n\t    return (\r\n\t    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow5'>\r\n\t\t\t<div>\r\n\t\t\t    <ForecastList id={this.state.key} />\r\n\t\t\t  \t<h2>{this.state.name}</h2>\r\n\t\t\t  \t<p>{this.state.country}</p>\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t    );\r\n\t}\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from 'react';\r\nimport Card from './Card';\r\n\r\n// source of inspiration\r\n//https://programmingwithmosh.com/react/simple-react-autocomplete-component/\r\n\r\nexport class Autocomplete extends Component {\r\n    \r\n    // Autocomplete component will use these states to suggest if the input phrase matches.\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            filteredCities: [],\r\n            showSuggestions: false,\r\n            userInput: '',\r\n            showResult: false,\r\n            resultCity: {}\r\n        };\r\n    }\r\n\r\n    //define defaultProperty with suggestions as an empty array\r\n    // vytknuti abych nepsal this.props.cities\r\n    static defaultProperty = {\r\n        cities: []\r\n    };\r\n    // event is working with argument e\r\n    onChange = e => {\r\n        const { cities } = this.props;\r\n        const userInput = e.currentTarget.value;\r\n        \r\n        // test if onChange event is working\r\n        // for (var i = 0; i < cities.length; i++) {\r\n        //     let result = cities[i].toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n        //     console.log(cities[i], result, userInput)\r\n        // }\r\n   \r\n        // filter - javascript funkce prohledavajici pole a dle podminky filtruje konkretni prvky pole\r\n        const filteredCities = cities.filter(\r\n            city =>\r\n            // tolowercase funkce meni vse na male pismena \r\n            // indexof potvrzuje pritomnost podslova v prohledavanem slove (-1 znamena, ze poslovo v prohledavanem slove neni; najdi si dokumentaci k indexof)\r\n            city.EnglishName.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n        );\r\n\r\n        this.setState({\r\n            filteredCities,\r\n            showSuggestions: true,\r\n            userInput: e.currentTarget.value,\r\n            showResult: false\r\n        });\r\n    };\r\n    // event on Click\r\n    onClick = e => {\r\n         const  userInput = e.currentTarget.innerText;\r\n         const finalResult = this.state.filteredCities.filter(\r\n            city =>\r\n            city.EnglishName.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n        );\r\n\r\n        this.setState({\r\n            filteredCities: [],\r\n            showSuggestions: false,\r\n            userInput: userInput,\r\n            showResult: true,\r\n            resultCity: finalResult[0]\r\n        });\r\n    };\r\n\r\n    render() {  \r\n         return (\r\n            <div>\r\n                <input\r\n                  type=\"search\"\r\n                  onChange={this.onChange}\r\n                  value={this.state.userInput}\r\n                />\r\n                {(this.state.showSuggestions && this.state.userInput) && (\r\n                this.state.filteredCities.length > 0 ? (\r\n                    <ul className=\"suggestions\">\r\n                         {this.state.filteredCities.map(city =>\r\n                          <li key={city.EnglishName} onClick={this.onClick}>\r\n                             {city.EnglishName}\r\n                           </li>\r\n                                         )}\r\n                    </ul>\r\n                    )\r\n                    : (\r\n                        <div className=\"no-suggestions\">\r\n                            <em>No suggestions</em>\r\n                        </div>\r\n                        )\r\n                    )\r\n                    }\r\n                    {(this.state.showResult) && \r\n                        <div id =\"card\">\r\n                            <Card \r\n                            id={this.state.resultCity.Key}\r\n                            name={this.state.resultCity.EnglishName} \r\n                            country={this.state.resultCity.Country.EnglishName}\r\n                            />\r\n                        </div>\r\n                        }\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Autocomplete;","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Autocomplete from '../components/Autocomplete';\r\nimport getCities from '../api/Api';\r\n\r\n//virtual DOM, collecting states as cities and searchfields\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\tcities: [],\r\n\t\tsearchfield:''\r\n\t\t}\r\n\t}\r\n\r\n// more info https://reactjs.org/docs/react-component.html\r\n\tcomponentDidMount(){\r\n\t\tgetCities()\r\n\t\t.then(cities => this.setState({cities: cities }));\r\n\t}\r\n\r\n\r\n\r\n//listening to the event and with every change runs the function\r\n  onSearchChange = (event) => {\r\n  \tthis.setState({ searchfield: event.target.value})\r\n     }\r\n\r\n\r\n//rendering cards with cities\r\n  render(){\r\n\t// loading in slow connection scenario - just comment componentDidMount function for test\r\n\t// if (this.state.cities.length === 0){\r\n\t// \treturn <h1> Loading </h1>\r\n\t// } else {\r\n\treturn(\r\n\t<div className='tc'>\r\n\t\t<h1 className='f1'>Weather App</h1>\r\n\t\t<Autocomplete className='pa3 ba b--green bg-lightest-blue' \r\n\t\t\t\t\t  cities={this.state.cities} />\r\n\t\t\r\n\t</div>\r\n\t\t);\r\n\t\t// }\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\nReactDOM.render(<App />\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}